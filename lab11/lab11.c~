#include <stdio.h>
#include <time.h>

void selectionSort ();
void insertionSort (int in);
void bubbleSort ();
void quickSort ();

int main () {
  int fileChoice;
  
  //prompt user for the data file they would like to sort
  printf ("Welcome to the CPSC 1011 sorting simulator.\n");
  printf ("Which data file would you like to sort?\n");
  printf ("  [1] Small file (10 items)\n");
  printf ("  [2] Medium file (100 items)\n");
  printf ("  [3] Large file (1,000 items)\n");
  printf ("  [4] Jumbo file (10,000 items)\n\n");

  printf ("Enter your choice:  ");
  scanf ("%d", &fileChoice);

  printf("Sorting with selection sort...done after .");
  printf("Sorting with inssertion sort...done after .");
  printf("Sorting with bubble sort...done (after ).");
  printf("Sorting with quick sort...done (after ).");
}

void selectionSort () {
  int i = 0; int j = 0; int temp = 0;
  int index_smallest = 0;
  for (i = 0; i < in; i++){
    index_smallest = i;
    for (j = i + 1; j < in; j++){
      if (numberArray[j] < numberArray[index_smallest])
	index_smallest = j;
    }
    temp = numberArray[i];
    numberArray[i] = numberArray[index_smallest];
    numberArray[index_smallest] = temp;
  }
}

void insertionSort (int in) {
  int temp = 0; int i = 0; int j = 0;
  for (i = 1; i < in; i++){
    temp = numberArray[i];
    j = i - 1;
    while (temp < numberArray[j] && j >= 0){
      numberArray[j+1] = numberArray[j];
      j--;
    }
    numberArray[j+1] = temp;
  }
}

void bubbleSort () {
  int i = 0; int j = 0; int num = 0; int temp = 0;
  for (i = 0; i < in; i++){
    for (int j = 0; j < (in - i - 1); j++){
      if (numberArray[j]> numberArray[j+1]){
	temp = numberArray[j];
	numberArray[j] = numberArray[j+1];
	numberArray[j+1] = temp;
      }
    }
  }
}

void quickSort () {
  int pivot = 0;
  int i = 0;
  int j = 0;
  int temp = 0;
  if (low < high){
    pivot = low;
    i = low;
    j = high;
    while (i < j){
      while (numberArray[i] <= numberArray[pivot] && i <= high){
	i++;
      }
      while (numberArray[j] > numberArray[pivot] && j >=low){
	j--;
      }
      if (i < j) {
	temp = numberArray[i];
	numberArray[i] = numberArray[j];
	numberArray[j] = temp;
      }
    }
    temp = numberArray[j];
    numberArray[j] = numberArray[pivot];
    numberArray[pivot] = temp;
    quickSort(low, j-1, numberArray);
    quickSort(j+1, high, numberArray);
  }
}
